(* Church numerals *)

def numeral := Pi (A : Type 1), (A → A) → (A → A)

eval numeral

def zero := (λ (A : Type 1) (f : A → A) (x : A) ⇒ x) : numeral

def succ :=
  (λ (n : numeral) (A : Type 1) (f : A → A) (x : A) ⇒ f (n A f x)) : numeral → numeral

def one := succ zero : numeral

def two := succ one : numeral

def three := (fun (A : Type 1) (f : A → A) (x : A) ⇒ f (f (f x))) : numeral

def five := succ (succ (succ (succ (succ zero)))) : numeral

def ( + ) :=
  (λ (m n : numeral) (A : Type 1) (f : A → A) (x : A) ⇒ m A f (n A f x))
  : numeral → numeral → numeral

def ( * ) :=
  (λ (m n : numeral) (A : Type 1) (f : A → A) (x : A) ⇒ m A (n A f) x)
  : numeral → numeral → numeral

def ten := five + five : numeral

def hundred := ten * ten

check hundred * ten

def thousand := hundred * ten

axiom N : Type 1
axiom Z : N
axiom S : N → N

eval (thousand N S Z)
