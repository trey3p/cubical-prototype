(* open Core.Eval *)
(* open Core.Ast *)
(* open Core.Context *)
(* open Util.Naming *)
(* open OUnit2 *)
(* open Utilities *)

(* let context3 : ctx = (create_context_0 3) *)


(* let x : variable = Fresh("x", 1) *)
(* let y : variable = Fresh("x", 2) *)
(* let z : variable = Fresh("x", 3) *)
(* let subst1 : substitution = [(x, Var y); (y, Type (Num 0))] *)
(* let e1 : expr = mk_var x *)
(* let e2 : expr = mk_var y *)
(* let e3 : expr = mk_lambda (z, mk_universe (Num 0),  (mk_app (mk_var z) (mk_var x))) *)
(* let e4 : expr = mk_pi (x, mk_universe (Num 0), mk_universe (Num 0)) *)
(* let e5 : expr = mk_sigma (x, mk_universe (Num 0), mk_universe (Num 0)) *)
(* let e6 : expr = mk_pair (mk_var x) (mk_var y) *)
(* let e7 : expr = mk_app (mk_lambda (x, mk_universe (Num 0), mk_var x)) (mk_universe (Num 0)) *)
(* let e8 : expr = mk_app (mk_lambda (x, mk_universe (Num 0), mk_var y)) (mk_universe (Num 0)) *)
(* let e9 : expr = mk_fst (mk_universe (Num 0)) (mk_universe (Num 1)) *)
(* let e10 : expr = mk_snd (mk_universe (Num 0)) (mk_universe (Num 1)) *)

(* let subst_test_suite = *)
(*   "subst_test_suite">::: *)
(*   [ *)
(*     "subst_t1">:: *)
(*     check_equal_expression *)
(*     ( *)
(*       (subst subst1 e1) *)
(*     ) *)
(*     ( *)
(*       mk_var y *)
(*     ); *)
(*     "subst_t2">:: *)
(*     check_equal_expression *)
(*     ( *)
(*       (subst subst1 e2) *)
(*     ) *)
(*     ( *)
(*       (mk_universe (Num 0)) *)
(*     ); *)
(*     "subst_t3">:: *)
(*     check_equal_expression *)
(*     ( *)
(*       (subst subst1 e3) *)
(*     ) *)
(*     ( *)
(*       mk_lambda ((fresh z), mk_universe (Num 0), mk_app (mk_var (fresh z)) (mk_var y)) *)
(*     ); *)
(*     "subst_t4">:: *)
(*     check_equal_expression *)
(*     ( *)
(*       (subst subst1 e4) *)
(*     ) *)
(*     ( *)
(*        mk_pi ((fresh x), mk_universe (Num 0), mk_universe (Num 0)) *)
(*     ); *)
(*     "subst_t5">:: *)
(*     check_equal_expression *)
(*     ( *)
(*       (subst subst1 e5) *)
(*     ) *)
(*     ( *)
(*       mk_sigma ((fresh x), mk_universe (Num 0), mk_universe (Num 0)) *)
(*     ); *)
(*     "subst_t6">:: *)
(*     check_equal_expression *)
(*     ( *)
(*       (subst subst1 e6) *)
(*     ) *)
(*     ( *)
(*       mk_pair (mk_var y) (mk_universe (Num 0)) *)
(*     ); *)
(* ] *)


(* let eval_test_suite = *)
(*   "eval_test_suite">::: *)
(*   [ *)
(*     "eval_t1">:: *)
(*     check_equal_expression *)
(*     ( *)
(*       (eval context3 e7) *)
(*     ) *)
(*     ( *)
(*       mk_universe (Num 0) *)
(*     ); *)
(*     "eval_t2">:: *)
(*     check_equal_expression *)
(*     ( *)
(*       (eval context3 e8) *)
(*     ) *)
(*     ( *)
(*       mk_var y *)
(*     ); *)
(*     "eval_t3">:: *)
(*     check_equal_expression *)
(*     ( *)
(*       (eval context3 e9) *)
(*     ) *)
(*     ( *)
(*       mk_universe (Num 0) *)
(*     ); *)
(*     "eval_t4">:: *)
(*     check_equal_expression *)
(*     ( *)
(*       (eval context3 e10) *)
(*     ) *)
(*     ( *)
(*       mk_universe (Num 1) *)
(*     ); *)
(*   ] *)

(* let () = *)
(*   run_test_tt_main eval_test_suite; *)
(*   run_test_tt_main subst_test_suite *)
